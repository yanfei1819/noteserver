1.Spring AOP实现原理
  Spring采用动态代理技术实现AOP机制。
  （动态生成一个新的类）
  当Spring使用AOP之后,getBean方法返回的
  对象是采用动态代理技术新生成的一个类型。
  这个新类重写原有组件各个方法,在方法中
  调用方面组件和原目标组件的处理

  public class $Proxy7 implements SimpleService{
      public void add(){
	//调用方面组件处理
	//调用目标组件处理
      }
  }

  Spring动态代理技术有以下实现
  --通过JDK Proxy API 
    （目标组件有接口采用此方法）
    public class xxx implements 目标接口{
      //实现目标组件方法
    }
  --通过CGLIB工具包
    （目标组件没有接口采用此方法）
    public class xxx extends 目标类型{
      //重写目标组件方法
    }


 ==================
问:什么是AOP，实现原理
 --AOP概念（什么是AOP）
 --AOP优点（有啥好处）
 --AOP如何实现（怎么实现的，思想）
 --AOP在实际开发中的使用（你有没有使用经验）
   事务管理、异常日志处理

2.使用AOP实现异常日志处理
  功能：组件发生异常，将异常信息写入文件。
  --方面：将异常信息写入文件
  --切入点：用到所有Service组件方法
  --通知：异常通知

3.Log4j日志组件
 需要引入log4j.jar开发包
 可以灵活输出日志信息

 log4j有3种组件
 --Logger日志器
   具有输出信息的方法.
   debug(),info(),warn(),error(),fatal()
 --Appender输出器
   具有多种类型，每一种组件都有不同
   输出方式，例如文件输出,控制台输出
 --Layout格式器
   具有多种类型,每一种都有不同的格式，
   用于将消息格式化

 ===使用方法===
 --引入log4j.jar开发包
 --src添加log4j.properties文件
 --代码中使用Logger对象输出信息
 --在log4j.properties配置Logger,Appender,Layout